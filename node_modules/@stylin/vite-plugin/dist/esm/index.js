import { createFilter } from '@rollup/pluginutils';
import { extractClassNames, parseComments } from './parser.js';
import { readFileSync } from 'node:fs';
function stringify(o) {
    return JSON.stringify(o);
}
export const resultCache = new Map();
const filter = createFilter(/\.module\.s?css$/);
function compileCSS(options) {
    const { id, code } = options;
    const rawCSS = readFileSync(id, `utf-8`);
    const msa = parseComments(rawCSS);
    const mapping = extractClassNames(code);
    return {
        mapping,
        msa
    };
}
export default function stylinLoader() {
    return {
        name: `vite-plugin-stylin`,
        enforce: `post`,
        transform(code, id) {
            if (filter(id)) {
                const { msa, mapping } = compileCSS({ id, code });
                resultCache.set(id, { msa });
                const transformedCode = `import {applyStyle as style, createComponent} from '@stylin/style'
${code.replace(/(export default [\S\s]*;)/, `
const styleComponent = createComponent(${stringify(mapping)})
${msa
                    .map((value) => `export const ${value.componentName} = styleComponent(${stringify(value)})`)
                    .join(`\n`)}
export const applyStyle = style(${stringify(mapping)})(${JSON.stringify(msa)})
$1`)}`;
                return {
                    code: transformedCode,
                    map: { mappings: `` }
                };
            }
        },
        async handleHotUpdate(ctx) {
            const id = ctx.file;
            const code = await ctx.read();
            if (filter(id)) {
                const { msa } = compileCSS({ id, code });
                resultCache.set(id, { msa });
            }
        },
    };
}
//# sourceMappingURL=index.js.map