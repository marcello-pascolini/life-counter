"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const handlebars_1 = __importDefault(require("handlebars"));
const pluginutils_1 = require("@rollup/pluginutils");
const node_path_1 = require("node:path");
const ts_parser_js_1 = require("./ts-parser.js");
const index_js_1 = require("./index.js");
const node_fs_1 = require("node:fs");
/** @ts-ignore support both CommonJS and ESM */
const currentDirname = typeof __dirname !== `undefined` ? __dirname : import.meta.dirname;
const template = (0, node_fs_1.readFileSync)((0, node_path_1.join)(currentDirname, `template.hbs`), `utf8`);
const toDTS = handlebars_1.default.compile(template, { noEscape: true });
const filter = (0, pluginutils_1.createFilter)(/\.module\.s?css$/);
const shouldTransform = (id) => filter(id) && index_js_1.resultCache.has(id);
const nameFile = (path) => {
    const dirName = (0, node_path_1.dirname)(path);
    const baseName = (0, node_path_1.basename)(path);
    return (0, node_path_1.join)(dirName, `${baseName}.d.ts`);
};
function generateDeclarationFile(options) {
    const { id, onError } = options;
    const { msa } = index_js_1.resultCache.get(id);
    const exports = msa.map(({ componentName, className, properties, tagName, variables }) => {
        const parsedProperties = (0, ts_parser_js_1.parseProperty)(properties);
        const parsedVariables = (0, ts_parser_js_1.parseVariable)(variables);
        return {
            className,
            componentName,
            isExtended: tagName && (parsedProperties || parsedVariables) && true,
            properties: parsedProperties,
            propsType: `${componentName}Props`,
            styledPropsType: `Styled${componentName}Props`,
            tagName,
            variables: parsedVariables,
        };
    });
    (0, node_fs_1.writeFile)(nameFile(id), toDTS({ exports }), error => error && onError && onError(error));
}
function tsLoader() {
    return {
        name: `vite-ts-stylin`,
        enforce: 'post',
        transform(code, id) {
            if (shouldTransform(id)) {
                generateDeclarationFile({ id, onError: this.error });
            }
        },
        handleHotUpdate(ctx) {
            const id = ctx.file;
            if (shouldTransform(id)) {
                generateDeclarationFile({ id, onError: console.error });
            }
        },
    };
}
exports.default = tsLoader;
//# sourceMappingURL=ts.js.map