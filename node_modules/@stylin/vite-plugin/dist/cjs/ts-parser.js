"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseVariable = exports.parseProperty = void 0;
const R = __importStar(require("ramda"));
const isOptional = (value) => ((Array.isArray(value) && value[2]) || (!Array.isArray(value) && value[`@isOptional`]) ? `?` : ``);
const isBoolean = R.ifElse(R.test(/^(true|false)$/), R.always(`boolean`), R.F);
const isNumber = R.ifElse(R.test(/^\d+$/), R.always(`number`), R.F);
const toLiteral = R.pipe(R.keys, R.reject(R.equals(`@isOptional`)), R.map((value) => `'${value}'`), R.join(` | `));
const extractName = R.pipe(R.keys, R.reject(R.equals(`@isOptional`)), R.head);
function definePropertyType(value) {
    const varName = extractName(value);
    return (isBoolean(varName) ||
        isNumber(varName) ||
        toLiteral(value));
}
const defineVariableType = R.pipe(R.head, (value) => isBoolean(value) || isNumber(value) || `string`);
const parseProperty = R.compose(R.when(R.isEmpty, R.always(``)), R.join(`\n`), R.map(([key, value]) => `${key}${isOptional(value)}: ${definePropertyType(value)}`), R.toPairs);
exports.parseProperty = parseProperty;
const parseVariable = R.compose(R.join(`\n`), R.map(([key, value]) => `${key}${isOptional(value)}: ${defineVariableType(value)}`), R.toPairs);
exports.parseVariable = parseVariable;
//# sourceMappingURL=ts-parser.js.map