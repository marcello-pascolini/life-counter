"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractClassNames = exports.parseComments = void 0;
const R = __importStar(require("ramda"));
const removeSpaces = R.compose(R.trim, R.replace(/\s\s+/g, ` `));
const isMapped = R.both(R.is(String), R.includes(`{`));
const parseMapped = (initValue) => R.pipe(R.match(/(?![\s])([\w-]+)[\s:]+([\w-]+)/g), R.map(value => {
    const [a, b] = value?.split(`:`);
    return [a, b];
}), R.reduce((acc, [property, css]) => R.assoc(property, css.trim(), acc), initValue));
const parseMappedValues = ({ value, isOptional }) => (isMapped(value) &&
    parseMapped({ '@isOptional': isOptional })(value));
const isMultiple = R.both(R.is(String), R.includes(`|`));
const parseMultiple = (initValue) => R.pipe(R.split(`|`), R.reduce((acc, next) => R.assoc(removeSpaces(next), removeSpaces(next), acc), initValue));
const parseMultipleValues = ({ value, isOptional }) => (isMultiple(value) &&
    parseMultiple({ '@isOptional': isOptional })(value));
const parseTernaryValue = ({ value, isOptional }) => {
    if (typeof value !== `string`)
        return false;
    const chunks = value.split(/\?|:/);
    if (!chunks || chunks.length !== 3)
        return false;
    const [test, cssTrue, cssFalse] = chunks.map(removeSpaces);
    return {
        [test]: cssTrue,
        '@default': cssFalse,
        '@isOptional': isOptional
    };
};
const parseConditionalValue = ({ value, isOptional }) => {
    if (typeof value !== `string`)
        return false;
    const result = removeSpaces(value).split(/\s/);
    if (result.length !== 2)
        return false;
    const [test, cssTrue] = result;
    return { [test]: cssTrue, '@isOptional': isOptional };
};
const parseSingleValue = ({ defValue, isOptional, value }) => {
    if (typeof value !== `string`)
        return false;
    const test = removeSpaces(value);
    if (!test)
        return false;
    return { [test]: defValue, '@isOptional': isOptional };
};
const isVariable = R.both(R.is(String), R.includes(`--`));
const parseVariable = ({ value, isOptional }) => {
    if (!isVariable(value))
        return false;
    const reValue = /(.+)\s+(--[\w-]+)/;
    const [all, defaultValue, variable] = reValue.exec(value) || [];
    return all ? [removeSpaces(defaultValue), variable, isOptional] : false;
};
const parseProperty = value => (parseMappedValues(value) ||
    parseMultipleValues(value) ||
    parseTernaryValue(value) ||
    parseConditionalValue(value) ||
    parseSingleValue(value));
function extract(name, text) {
    const re = new RegExp(`@${name}[:\\s]+(.+)[\n|\r]+`);
    const [, value = ``] = text.match(re) || [];
    return value.trim();
}
const toCamelCase = R.replace(/(^\w|[-_][a-z])/g, R.pipe(R.toUpper, R.replace(`-`, ``), R.replace(`_`, ``)));
const pickRawValues = R.applySpec({
    defValue: R.nth(1),
    isOptional: R.pipe(R.nth(2), R.ifElse(R.is(String), R.equals(`?`), R.always(false))),
    value: R.nth(3),
});
function parseComment(text) {
    const reVariable = /(\w+)(\??)[:\s]+([\w|\s{}-][^\n\r}]+)/g;
    const match = (re) => {
        const matches = re.exec(text);
        const result = { properties: {}, variables: {} };
        if (!matches)
            return result;
        const raw = pickRawValues(matches);
        const parsedVariable = parseVariable(raw);
        if (parsedVariable) {
            return R.over(
            // @ts-ignore
            R.lensProp(`variables`), 
            // @ts-ignore
            R.assoc(raw.defValue, parsedVariable), match(re));
        }
        const parsedProperty = parseProperty(raw);
        if (parsedProperty) {
            return R.over(
            // @ts-ignore
            R.lensProp(`properties`), 
            // @ts-ignore
            R.assoc(raw.defValue, parsedProperty), match(re));
        }
        return result;
    };
    return match(reVariable);
}
const parseCommentOnly = R.pipe(R.replace(/@.+/g, ``), R.when(R.includes(`{`), R.replace(/{(.*|\n)*}/g, R.replace(/\n/g, ``))), R.trim, parseComment);
function parseComments(text) {
    const reComment = /\/\*+((\r|\n|.[^*])+)\*+\/[\n\r]+\.([\w-]+)/gm;
    const match = (re) => {
        const matches = re.exec(text);
        if (!matches)
            return [];
        const [, comment, , className] = matches;
        const pack = R.append({
            className,
            componentName: extract(`component`, comment) || toCamelCase(className),
            tagName: extract(`tag`, comment),
            ...parseCommentOnly(comment),
        });
        return pack(match(re));
    };
    return match(reComment);
}
exports.parseComments = parseComments;
function extractClassNames(code) {
    const reDefaultExportClassNames = /['"]([\w-]+)['"]:\s+['"]([\w-]+)['"]/gs;
    const reNamedExportsClassNames = /export const (\w+) = ['"]([\w-]+)['"];/g;
    const match = (re) => {
        const matches = re.exec(code);
        if (!matches)
            return {};
        const [, key, value] = matches;
        return R.assoc(key, value, match(re));
    };
    return R.mergeDeepRight(match(reDefaultExportClassNames), match(reNamedExportsClassNames));
}
exports.extractClassNames = extractClassNames;
//# sourceMappingURL=parser.js.map