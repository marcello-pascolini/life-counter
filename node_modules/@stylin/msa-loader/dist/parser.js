"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseProperty = exports.parseVariable = void 0;
const R = __importStar(require("ramda"));
const removeSpaces = R.compose(R.trim, R.replace(/\s\s+/g, ` `));
// propertyName {
//   true: css-one
//   false: css-two
// }
const isMapped = R.both(R.is(String), R.includes(`{`));
const parseMapped = (initValue) => R.pipe(R.match(/(?![\s])([\w-]+)[\s:]+([\w-]+)/g), R.map(value => {
    const [a, b] = value === null || value === void 0 ? void 0 : value.split(`:`);
    return [a, b];
}), R.reduce((acc, [property, css]) => R.assoc(property, css.trim(), acc), initValue));
const parseMappedValues = ({ value, isOptional }) => (isMapped(value) &&
    parseMapped({ '@isOptional': isOptional })(value));
// propertyName: css-one | css-two | css-three
const isMultiple = R.both(R.is(String), R.includes(`|`));
const parseMultiple = (initValue) => R.pipe(R.split(`|`), R.reduce((acc, next) => R.assoc(removeSpaces(next), removeSpaces(next), acc), initValue));
const parseMultipleValues = ({ value, isOptional }) => (isMultiple(value) &&
    parseMultiple({ '@isOptional': isOptional })(value));
// propertyName: true ? css-one : css-two
const parseTernaryValue = ({ value, isOptional }) => {
    if (typeof value !== `string`)
        return false;
    const chunks = value.split(/\?|:/);
    if (!chunks || chunks.length !== 3)
        return false;
    const [test, cssTrue, cssFalse] = chunks.map(removeSpaces);
    return {
        [test]: cssTrue,
        '@default': cssFalse,
        '@isOptional': isOptional
    };
};
// propertyName: true css-one
const parseConditionalValue = ({ value, isOptional }) => {
    if (typeof value !== `string`)
        return false;
    const result = removeSpaces(value).split(/\s/);
    if (result.length !== 2)
        return false;
    const [test, cssTrue] = result;
    return { [test]: cssTrue, '@isOptional': isOptional };
};
// propertyName: true
const parseSingleValue = ({ defValue, isOptional, value }) => {
    if (typeof value !== `string`)
        return false;
    const test = removeSpaces(value);
    if (!test)
        return false;
    return { [test]: defValue, '@isOptional': isOptional };
};
// variableName: --css-variable def-value
const isVariable = R.both(R.is(String), R.includes(`--`));
const parseVariable = ({ value, isOptional }) => {
    if (!isVariable(value))
        return false;
    const reValue = /(.+)\s+(--[\w-]+)/;
    const [all, defaultValue, variable] = reValue.exec(value) || [];
    return all ? [removeSpaces(defaultValue), variable, isOptional] : false;
};
exports.parseVariable = parseVariable;
const parseProperty = value => (parseMappedValues(value) ||
    parseMultipleValues(value) ||
    parseTernaryValue(value) ||
    parseConditionalValue(value) ||
    parseSingleValue(value));
exports.parseProperty = parseProperty;
//# sourceMappingURL=parser.js.map