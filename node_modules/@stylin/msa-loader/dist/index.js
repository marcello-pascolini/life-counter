"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pitch = void 0;
const R = __importStar(require("ramda"));
const Handlebars = __importStar(require("handlebars"));
const parser_1 = require("./parser");
const path_1 = require("path");
const fs_1 = require("fs");
Handlebars.registerHelper(`json`, JSON.stringify);
const template = (0, fs_1.readFileSync)((0, path_1.join)(__dirname, `template.hbs`), `utf8`);
const toDTS = Handlebars.compile(template, { noEscape: true });
const toCamelCase = R.replace(/(^\w|[-_][a-z])/g, R.pipe(R.toUpper, R.replace(`-`, ``), R.replace(`_`, ``)));
const pickRawValues = R.applySpec({
    defValue: R.nth(1),
    isOptional: R.pipe(R.nth(2), R.equals(`?`)),
    value: R.nth(3),
});
function parseComment(text) {
    const reVariable = /(\w+)(\??)[:\s]+([\w|\s{}-][^\n\r}]+)/g;
    const match = (re) => {
        const matches = re.exec(text);
        const result = { properties: {}, variables: {} };
        if (!matches)
            return result;
        const raw = pickRawValues(matches);
        const parsedVariable = (0, parser_1.parseVariable)(raw);
        if (parsedVariable) {
            return R.over(R.lensProp(`variables`), R.assoc(raw.defValue, parsedVariable), match(re));
        }
        const parsedProperty = (0, parser_1.parseProperty)(raw);
        if (parsedProperty) {
            return R.over(R.lensProp(`properties`), R.assoc(raw.defValue, parsedProperty), match(re));
        }
        return result;
    };
    return match(reVariable);
}
const pickLocals = R.pipe(R.match(/export default (.+);/), R.nth(1));
const parseCommentOnly = R.pipe(R.replace(/@.+/g, ``), R.when(R.includes(`{`), R.replace(/\n|\r/g, ` `)), parseComment);
function extract(name, text) {
    const re = new RegExp(`@${name}[:\\s]+(.+)[\n|\r]+`);
    const [, value = ``] = text.match(re) || [];
    return value.trim();
}
function parseComments(text) {
    const reComment = /\/\*+((\r|\n|.[^*])+)\*+\/[\n\r]+\.([\w-]+)/gm;
    const match = (re) => {
        const matches = re.exec(text);
        if (!matches)
            return [];
        const [, comment, , className] = matches;
        const pack = R.append(Object.assign({ className, componentName: extract(`component`, comment) || toCamelCase(className), tagName: extract(`tag`, comment) }, parseCommentOnly(comment)));
        return pack(match(re));
    };
    return match(reComment);
}
function loader(content, sourceMap, meta = {}) {
    meta.msa = this.data.msa;
    this.addDependency(this.resource);
    const onComplete = this.async();
    const dts = toDTS({
        content,
        isStyleLoader: content.includes(`import content`),
        locals: pickLocals(content),
        msa: meta.msa,
    });
    onComplete(null, dts, sourceMap, meta);
}
function pitch(skip, me, sharedData) {
    const onComplete = this.async();
    (0, fs_1.readFile)(this.resource, `utf8`, (error, data) => {
        sharedData.msa = parseComments(data);
        onComplete(error);
    });
}
exports.pitch = pitch;
exports.default = loader;
//# sourceMappingURL=index.js.map